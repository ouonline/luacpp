#include "lua_state.h"
#include "lua_table.h"
#include "lua_function.h"
using namespace std;

namespace luacpp {

static void DummyDeleter(lua_State*) {}

LuaState::LuaState(lua_State* l, bool is_owner) {
    if (is_owner) {
        m_l = shared_ptr<lua_State>(l, lua_close);
        luaL_openlibs(l);
    } else {
        m_l = shared_ptr<lua_State>(l, DummyDeleter);
    }

    SetupGcTable();
}

LuaState::~LuaState() {
    if (m_l.get()) { // not moved
        luaL_unref(m_l.get(), LUA_REGISTRYINDEX, m_gc_table_ref);
    }
}

LuaObject LuaState::Get(const char* name) const {
    auto l = m_l.get();
    lua_getglobal(l, name);
    LuaObject ret(l, -1);
    lua_pop(l, 1);
    return ret;
}

void LuaState::Set(const char* name, const char* str) {
    lua_pushstring(m_l.get(), str);
    lua_setglobal(m_l.get(), name);
}

void LuaState::Set(const char* name, const char* str, uint64_t len) {
    lua_pushlstring(m_l.get(), str, len);
    lua_setglobal(m_l.get(), name);
}

void LuaState::Set(const char* name, lua_Number value) {
    lua_pushnumber(m_l.get(), value);
    lua_setglobal(m_l.get(), name);
}

void LuaState::Set(const char* name, const LuaObject& lobj) {
    lobj.PushSelf();
    lua_setglobal(m_l.get(), name);
}

LuaTable LuaState::CreateTable(const char* name) {
    auto l = m_l.get();

    lua_newtable(l);
    LuaTable ret(l, -1);

    if (name) {
        lua_setglobal(l, name);
    } else {
        lua_pop(l, 1);
    }

    return ret;
}

bool LuaState::DoString(const char* chunk, string* errstr,
                        const function<bool (int, const LuaObject&)>& callback) {
    auto l = m_l.get();
    bool ok = (luaL_loadstring(l, chunk) == LUA_OK);
    if (!ok) {
        if (errstr) {
            *errstr = lua_tostring(l, -1);
        }
        lua_pop(l, 1);
        return false;
    }

    LuaFunction f(l, -1);
    ok = f.Exec(callback, errstr);
    lua_pop(l, 1); // function generated by luaL_loadstring()
    return ok;
}

bool LuaState::DoFile(const char* script, string* errstr,
                      const function<bool (int, const LuaObject&)>& callback) {
    auto l = m_l.get();
    bool ok = (luaL_loadfile(l, script) == LUA_OK);
    if (!ok) {
        if (errstr) {
            *errstr = lua_tostring(l, -1);
        }
        lua_pop(l, 1);
        return false;
    }

    LuaFunction f(l, -1);
    ok = f.Exec(callback, errstr);
    lua_pop(l, 1); // function generated by luaL_loadfile()
    return ok;
}

}
